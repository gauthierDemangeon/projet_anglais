package Model;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import com.google.api.client.googleapis.json.GoogleJsonResponseException;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.ResourceId;
import com.google.api.services.youtube.model.SearchListResponse;
import com.google.api.services.youtube.model.SearchResult;
import com.google.api.services.youtube.model.Thumbnail;

public class Search {

private YouTube youtube;
private String FILENAME;
private long NbVideo;

	public Search(String Fn,YouTube y,long nb)
	{
		youtube = y;
		FILENAME = Fn;
		NbVideo = nb;
	}
	public ArrayList<DescripteurVideo> search(String item)
	{
        Properties properties = new Properties();
        List<SearchResult> searchResultList = null;
        try {
            InputStream in = Search.class.getResourceAsStream("/" + FILENAME);
            properties.load(in);

        } catch (IOException e) {
            System.err.println("There was an error reading " + FILENAME + ": " + e.getCause()
                    + " : " + e.getMessage());
            System.exit(1);
        }
        try {
        // Define the API request for retrieving search results.
        YouTube.Search.List search = youtube.search().list("id,snippet");
        String apiKey = properties.getProperty("youtube.apikey");
        search.setKey(apiKey);
        search.setQ(item);

        // Restrict the search results to only include videos. See:
        // https://developers.google.com/youtube/v3/docs/search/list#type
        search.setType("video");

        // To increase efficiency, only retrieve the fields that the
        // application uses.
        search.setFields("*");
        //search.setFields("items(id/kind,id/videoId,snippet/title,snippet/thumbnails/default/url)");
        search.setMaxResults(NbVideo);

        // Call the API and print results.
        SearchListResponse searchResponse = search.execute();
        searchResultList = searchResponse.getItems();
        } catch (GoogleJsonResponseException e) {
            System.err.println("There was a service error: " + e.getDetails().getCode() + " : "
                    + e.getDetails().getMessage());
        } catch (IOException e) {
            System.err.println("There was an IO error: " + e.getCause() + " : " + e.getMessage());
        } catch (Throwable t) {
            t.printStackTrace();
        }
        return CreationDV(searchResultList);
	}
	public ArrayList<DescripteurVideo> CreationDV(List<SearchResult> list)
	{
		ArrayList<DescripteurVideo> ListDV = new ArrayList<DescripteurVideo>();
		Iterator<SearchResult> iteratorSearchResults = list.iterator();
        while (iteratorSearchResults.hasNext()) {

            SearchResult singleVideo = iteratorSearchResults.next();
            ResourceId rId = singleVideo.getId();

            // Confirm that the result represents a video. Otherwise, the
            // item will not contain a video ID.
            if (rId.getKind().equals("youtube#video")) {
                Thumbnail thumbnail = singleVideo.getSnippet().getThumbnails().getDefault();
                ListDV.add(new DescripteurVideo(rId.getVideoId(), singleVideo.getSnippet().getTitle(), singleVideo.getSnippet().getDescription(), singleVideo.getSnippet().getChannelId(), singleVideo.getSnippet().getChannelTitle(),thumbnail.getUrl()));
            }
        }
        for(DescripteurVideo dv : ListDV)
        {
        	dv.print();
        }
		return new ArrayList<DescripteurVideo>();
	}
}
